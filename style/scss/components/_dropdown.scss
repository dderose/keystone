// Dropdowns
//
// A dropdown menu that can be used as a list of links or as a form input, utilizing an optional, hidden &lt;select&gt; menu.
//
// <h2>USAGE:</h2>
// <code>$('.js-dropdown').Dropdown(options);</code>
//
// <br><br><br>
// <h2>OPTIONS:</h2>
// The dropdown is configurable via data-attributes and jQuery options. The various options can be mixed and matched in any combination.
//
// <table class="Table Table--border Table--striped u-centi u-marginTop">
// <thead class="Table-head">
//   <tr>
//     <th>Option</th>
//     <th>Description</th>
//     <th>data-attribute</th>
//     <th>jQuery option</th>
//     <th style="width:250px">Example</th>
//   </tr>
// </thead>
// <tbody>
//   <tr>
//     <td>Fixed Height</td>
//     <td>Limit the height of the dropdown menu. Default: auto.</td>
//     <td class="u-textBreak">data-height="100"</td>
//     <td class="u-textBreak">$('.js-dropdown').Dropdown({height: '100'});</td>
//     <td>
            // <div data-height="100" class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed">
            //   <button type="button" class="Dropdown-toggle js-dropdownTrigger">
            //     <span>fixed height</span>
            //   <i class="Icon--roundedCaret"></i>
            //   </button>
            //   <ul class="Dropdown-menu">
            //      <li class="Dropdown-menu-header">Section Heading</li>
            //      <li class="Dropdown-menu-item" data-value="One"><span>Link One</span></li>
            //      <li class="Dropdown-menu-item" data-value="Two"><span>Link Two</span></li>
            //      <li class="Dropdown-menu-item" data-value="Three"><span>Link Three</span></li>
            //  </ul>
            // </div>
//     </td>
//   </tr>
//   <tr>
//     <td>Vertical position</td>
//     <td>Position the dropdown below or above the trigger. Default: below.</td>
//     <td class="u-textBreak">data-vposition="above"</td>
//     <td class="u-textBreak">$('.js-dropdown').Dropdown({vposition: 'above'});</td>
//     <td>
        // <div data-vposition="above" class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed">
        //   <button type="button" class="Dropdown-toggle js-dropdownTrigger">
        //     <span>position above</span>
        //   <i class="Icon--roundedCaret"></i>
        //   </button>
        //   <ul class="Dropdown-menu">
        //      <li class="Dropdown-menu-header">Section Heading</li>
        //      <li class="Dropdown-menu-item" data-value="One"><span>Link One</span></li>
        //      <li class="Dropdown-menu-item" data-value="Two"><span>Link Two</span></li>
        //      <li class="Dropdown-menu-item" data-value="Three"><span>Link Three</span></li>
        //  </ul>
        // </div>
//     </td>
//   </tr>
//   <tr>
//     <td>Horizontal position</td>
//     <td>Align the dropdown with the left or right edge of the trigger. Default: left</td>
//     <td class="u-textBreak">data-hposition="right"</td>
//     <td class="u-textBreak">$('.js-dropdown').Dropdown({hposition: 'right'});</td>
//     <td>
        // <div data-hposition="right" class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed">
        //   <button type="button" class="Dropdown-toggle js-dropdownTrigger">
        //     <span>position right</span>
        //   <i class="Icon--roundedCaret"></i>
        //   </button>
        //   <ul class="Dropdown-menu">
        //      <li class="Dropdown-menu-header">Section Heading</li>
        //      <li class="Dropdown-menu-item" data-value="One"><span>Link One</span></li>
        //      <li class="Dropdown-menu-item" data-value="Two"><span>Link Two</span></li>
        //      <li class="Dropdown-menu-item" data-value="Three"><span>Link Three</span></li>
        //  </ul>
        // </div>
//     </td>
//   </tr>
//   <tr>
//     <td>Preselected option</td>
//     <td>Upon initial load of the dropdown, have an item preseleced. The value of this options should match the data-value of the <em>&lt;li class="Dropdown-menu-item"&gt;</em>. Default: none selected</td>
//     <td class="u-textBreak">data-preselected="Two"</td>
//     <td class="u-textBreak">$('.js-dropdown').Dropdown({preselected: 'Two'});</td>
//     <td>
        // <div data-preselected="Two" class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed">
        //   <button type="button" class="Dropdown-toggle js-dropdownTrigger">
        //     <span>position above</span>
        //   <i class="Icon--roundedCaret"></i>
        //   </button>
        //   <ul class="Dropdown-menu">
        //      <li class="Dropdown-menu-header">Section Heading</li>
        //      <li class="Dropdown-menu-item" data-value="One"><span>Link One</span></li>
        //      <li class="Dropdown-menu-item" data-value="Two"><span>Link Two</span></li>
        //      <li class="Dropdown-menu-item" data-value="Three"><span>Link Three</span></li>
        //  </ul>
        // </div>
//     </td>
//   </tr>
//   <tr>
//     <td>Auto-create hidden &lt;select&gt;</td>
//     <td>Mimick the dropdown and its values in a hidden select element. The value becomes the id attribute of the <em>&lt;select&gt;</em> menu. Default: not created</td>
//     <td class="u-textBreak">data-select="uniqueID"</td>
//     <td class="u-textBreak">$('.js-dropdown').Dropdown({select: 'uniqueID'});</td>
//     <td>
        // <div data-select="withSelectMenu" class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed">
        //   <button type="button" class="Dropdown-toggle js-dropdownTrigger">
        //     <span>created &lt;select&gt;</span>
        //   <i class="Icon--roundedCaret"></i>
        //   </button>
        //   <ul class="Dropdown-menu">
        //      <li class="Dropdown-menu-header">Section Heading</li>
        //      <li class="Dropdown-menu-item" data-value="One"><span>Link One</span></li>
        //      <li class="Dropdown-menu-item" data-value="Two"><span>Link Two</span></li>
        //      <li class="Dropdown-menu-item" data-value="Three"><span>Link Three</span></li>
        //  </ul>
        // </div>
//     </td>
//   </tr>
//   <tr>
//     <td>Silence JavaScript <em>change</em> events</td>
//     <td>When changing a generated <em>&lt;select&gt;</em> element, FED emits a JavaScript <em>change</em> event. You can prevent this by setting emitChange to false. Default: true</td>
//     <td class="u-textBreak"></td>
//     <td class="u-textBreak">$('.js-dropdown').Dropdown({select: 'uniqueID',<br />emitChange: false});</td>
//     <td>
        // <div data-select="withSelectMenu" class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed">
        //   <button type="button" class="Dropdown-toggle js-dropdownTrigger">
        //     <span>created &lt;select&gt;</span>
        //   <i class="Icon--roundedCaret"></i>
        //   </button>
        //   <ul class="Dropdown-menu">
        //      <li class="Dropdown-menu-header">Section Heading</li>
        //      <li class="Dropdown-menu-item" data-value="One"><span>Link One</span></li>
        //      <li class="Dropdown-menu-item" data-value="Two"><span>Link Two</span></li>
        //      <li class="Dropdown-menu-item" data-value="Three"><span>Link Three</span></li>
        //  </ul>
        // </div>
//     </td>
//   </tr>
// </tbody>
// </table>
//
// <h2>METHODS:</h2>
// <h4>$().Dropdown('open')</h4>
// <p>Toggles the dropdown open and closed.</p>
//
// <h4>$().Dropdown('close')</h4>
// <p>Close the dropdown.</p>
//
// <h4>$().Dropdown('select', $jQueryOptionElementObject)</h4>
// <p>Programatically select an option in the dropdown by passing the jQuery object of the menu-item.</p>
//
// <br>
// <h2>EVENTS:</h2>
// <p>'<em>open.fed.dropdown</em>': triggered when the dropdown opens, attached to .js-dropdown element</p>
// <p>'<em>close.fed.dropdown</em>': triggered when the dropdown closes, attached to .js-dropdown element</p>
//
// <br>
// <h2>EXAMPLES:</h2>
//
// Markup:
// <div class="Dropdown {$modifiers} js-dropdown u-clearfix is-closed" data-qe-id="dropdown">
//   <button type="button" class="Dropdown-toggle js-dropdownTrigger" data-qe-id="dropdown-toggle">
//     <span>button.Dropdown-toggle.js-dropdownTrigger</span>
//   <i class="Icon--roundedCaret"></i>
//   </button>
//   <ul class="Dropdown-menu">
//      <li class="Dropdown-menu-header" data-qe-id="dropdown-header">Section Heading</li>
//      <li class="Dropdown-menu-item" data-value="One" data-qe-id="dropdown-{{item}} dropdown-{{option1}}"><span>Link One</span></li>
//      <li class="Dropdown-menu-item" data-value="Two" data-qe-id="dropdown-{{item}} dropdown-{{option2}}"><span>Link Two</span></li>
//      <li class="Dropdown-menu-item" data-value="Three" data-qe-id="dropdown-{{item}} dropdown-{{option3}}"><span>Link Three</span></li>
//	</ul>
// </div>
//
// .Dropdown--plain - a plain link version of the dropdown.
// .Dropdown--block - full-width, fluid block behavior
//
// Styleguide 4.0.0

.Dropdown {
    position: relative;
    display: inline-block;

    &.is-closed > .Dropdown-menu {
        @extend %visuallyHidden;
    }
    &.is-open > .Dropdown-toggle,
    &.is-open > .Dropdown-toggle    {
        background-color: $dropdownColor4;
        border-color: #acacac;
        color: $dropdownColor3;
    }
}

.Dropdown-toggle {
    padding: 12px 15px;
    padding: rem(12) rem(15);
    border: 1px solid $dropdownColor4;
    border: rem(1) solid $dropdownColor4;
    background-color: #f7f9fb;
    color: $dropdownColor2;
    font-size: $centi-size + px;
    font-size: rem($centi-size);
    border-radius: $brand-round + px;
    border-radius: rem($brand-round);

    &:hover {
      background-color: #dee0e3;
    }

    &.is-error {
        border: 1px solid $dropdownColor5;
        color: $dropdownColor5;
    }
}

.Dropdown-toggle:focus {
    outline: none;
}

.Dropdown-toggle > [class*=Icon--] {
    vertical-align: middle;
    margin-left: 5px;
    margin-left: rem(5);
}

.Dropdown-menu {
    position: absolute;
    z-index: 1000;
    top: 100%;
    left: 0;
    right: 0;
    list-style-type: none;
    min-width: 160px;
    min-width: rem(160);
    padding: 5px 0;
    padding: rem(5) 0;
    margin:2px 0 0;
    margin: rem(2) 0 0;
    background-color: #ffffff;
    border: 1px solid $dropdownColor4;
    border: rem(1) solid $dropdownColor4;
    border-radius: $brand-round + px;
    border-radius: rem($brand-round);
    box-shadow: rem(5) rem(5) 0 rgba(57, 72, 86, .15);
    @include vendor-prefix(background-clip, padding-box);

    .is-selected, .is-selected:hover,
    .is-selected > a, .is-selected > a:hover,
    .is-selected > *, .is-selected > *:hover {
        background-color: #ddeef6;
        color: $dropdownColor1;
    }

    li {

        &:before {
            content: "";
        }
    }
}

.Dropdown-menu-header {
    color: $dropdownColor2;
    margin: 0;
    padding: 8px 15px;
    padding: rem(8) rem(15);
    font-weight: 600;
    font-size: $milli-size + px;
    font-size: rem($milli-size);
    text-transform: uppercase;

    &:hover {
        background-color: transparent;
        cursor: default;
    }
}

.Dropdown-menu-item {
    padding: 0;
    margin: 0;

    > span,
    > a {
        display: block;
        padding: 8px 15px;
        padding: rem(8) rem(15);
        clear: both;
        color: $dropdownColor3;
        font-size: $centi-size + px;
        font-size: rem($centi-size);
        text-decoration: none;
        word-wrap: break-word;

        &:hover {
            background-color: #eef0f1;
            cursor: pointer;
        }
    }
}

// Modifier:  makes the dropdown look like a text link
.Dropdown--plain {
    &.is-open > .Dropdown-toggle,
    &.is-open > .Dropdown-toggle:hover {
        background-color: transparent;
        color: $dropdownColor1;
    }

    .Dropdown-toggle {
        border-radius: 0;
        border: none;
        padding: 0;
        background-color: transparent;
        color: $dropdownColor1;

        &:hover {
            background-color: transparent;
        }

        &.is-error {
            color: $dropdownColor5;
        }
    }
}

// Modifier:  makes the dropdown behave like a fluid block
.Dropdown--block {
    display: block;

    .Dropdown-toggle {
        width: 100%;
        text-align:left;

        .Icon {
            float: right;
            margin-top: 2px;
            margin-top: rem(2);
        }
    }
}
